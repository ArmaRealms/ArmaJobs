package com.gamingmesh.jobs.config;

import org.bukkit.Location;
import org.bukkit.block.Block;

import com.gamingmesh.jobs.Jobs;
import com.gamingmesh.jobs.container.ActionInfo;
import com.gamingmesh.jobs.container.ActionType;
import com.gamingmesh.jobs.container.BlockProtection;
import com.gamingmesh.jobs.container.ExploitProtection;
import com.gamingmesh.jobs.container.JobsPlayer;

import net.Zrips.CMILib.ActionBar.CMIActionBar;
import net.Zrips.CMILib.Container.CMIBlock;
import net.Zrips.CMILib.Container.CMIBlock.Bisect;
import net.Zrips.CMILib.Items.CMIMaterial;
import net.Zrips.CMILib.Logs.CMIDebug;
import net.Zrips.CMILib.PersistentData.CMIBlockPersistentDataContainer;

public class ExploitProtectionManager {

    private static final String NAMEGENERAL = "JobsExploitProtection";
    private static final String NAMEPAID = "JobsPaidProtection";

    public void addProtection(Block block, Integer cd) {

        if (cd == null || cd == 0)
            return;

        // Assuming that block is bottom part of flower we will add top part to the record too
        switch (CMIMaterial.get(block)) {
        case LILAC:
        case SUNFLOWER:
        case ROSE_BUSH:
        case PEONY:
            CMIBlock cmb = new CMIBlock(block);
            // We are only interested in this being bottom block as this should never trigger for top part of placed block
            if (cmb.getBisect().equals(Bisect.BOTTOM))
                addProtection(block.getLocation().clone().add(0, 1, 0).getBlock(), cd, true);
            break;
        }

        addProtection(block, cd, true);
    }

    public void addProtection(Block block, Integer cd, boolean paid) {
        if (cd == null || cd == 0)
            return;

        addProtection(block, cd != -1 ? System.currentTimeMillis() + (cd * 1000) : -1, paid);
    }

    public ExploitProtection addProtection(Block block, Long protectedUntil, boolean paid) {

        if (!Jobs.getGCManager().useNewBlockProtection) {
            BlockProtection protection = Jobs.getBpManager().addP(block.getLocation(), protectedUntil, paid, true);

            ExploitProtection ep = new ExploitProtection(block.getLocation().toVector());
            ep.setPaid(protection.isPaid());
            ep.setProtectedUntil(protection.getTime());
            return ep;
        }

        if (protectedUntil == null || protectedUntil == 0)
            return null;

        CMIBlockPersistentDataContainer pdc = new CMIBlockPersistentDataContainer(block);
        pdc.set(NAMEGENERAL, protectedUntil);
        pdc.set(NAMEPAID, paid);
        pdc.save();

        ExploitProtection ep = new ExploitProtection(block.getLocation().toVector());
        ep.setPaid(paid);
        ep.setProtectedUntil(protectedUntil);

        return ep;
    }

    public void remove(Block block) {
CMIDebug.d("remove protection", block.getType());
        // In case double plant was destroyed we should remove both blocks from records
        CMIMaterial cmat = CMIMaterial.get(block);
        switch (cmat) {
        case LILAC:
        case SUNFLOWER:
        case ROSE_BUSH:
        case PEONY:
            CMIBlock cmb = new CMIBlock(block);
            if (cmb.getBisect().equals(Bisect.BOTTOM)) {
                block = block.getLocation().clone().add(0, 1, 0).getBlock();
            } else {
                block = block.getLocation().clone().add(0, -1, 0).getBlock();
            }
            return;
        }

        CMIBlockPersistentDataContainer pdc = new CMIBlockPersistentDataContainer(block);
        pdc.remove(NAMEGENERAL);
        pdc.remove(NAMEPAID);
        pdc.save();
    }

    public Long getTime(Block block) {

        if (!Jobs.getGCManager().useNewBlockProtection)
            return Jobs.getBpManager().getTime(block);

        CMIBlockPersistentDataContainer pdc = new CMIBlockPersistentDataContainer(block);
        return pdc.getLong(NAMEGENERAL);
    }

    public Long getTime(Location loc) {
        return getTime(loc.getBlock());
    }

    public Integer getBlockProtectionTime(Block block) {
        Integer time = Jobs.getRestrictedBlockManager().restrictedBlocksTimer.get(CMIMaterial.get(block));
        if (time == null && Jobs.getGCManager().useGlobalTimer) {
            time = Jobs.getGCManager().globalblocktimer;
        }
        return time;
    }

    public boolean isInProtection(Block block) {
        return Jobs.getRestrictedBlockManager().restrictedBlocksTimer.containsKey(CMIMaterial.get(block));
    }

    public void setPaid(Block block, boolean paid) {
        CMIBlockPersistentDataContainer pdc = new CMIBlockPersistentDataContainer(block);
        pdc.set(NAMEPAID, paid);
        pdc.save();
    }

    private ExploitProtection getProtection(Block block) {

        ExploitProtection ep = new ExploitProtection(block.getLocation().toVector());

        CMIBlockPersistentDataContainer pdc = new CMIBlockPersistentDataContainer(block);

        ep.setPaid(pdc.getBoolean(NAMEPAID));
        ep.setProtectedUntil(pdc.getLong(NAMEGENERAL));

        return ep;

    }

    public boolean isProtectionValidAddIfNotExists(JobsPlayer player, ActionInfo info, Block block, boolean inform) {

        if (!Jobs.getGCManager().useNewBlockProtection)
            return Jobs.getBpManager().isBpOk(player, info, block, inform);

        if (block == null || !Jobs.getGCManager().useBlockProtection)
            return true;

        if (info.getType() == ActionType.BREAK) {
            if (block.hasMetadata("JobsExploit")) {
                //player.sendMessage("This block is protected using Rukes' system!");
                return false;
            }

            ExploitProtection exploitProtection = getProtection(block);
            if (exploitProtection.getProtectedUntil() != 0) {
                long time = exploitProtection.getProtectedUntil();

                if (time == -1L) {
                    remove(block);
                    return false;
                }

                if (time < System.currentTimeMillis()) {
                    remove(block);
                    return true;
                }

                if (time > System.currentTimeMillis() || exploitProtection.isPaid()) {
                    if (inform && player.canGetPaid(info))
                        CMIActionBar.send(player.getPlayer(), Jobs.getLanguage().getMessage("message.blocktimer", "[time]", Math.round((time - System.currentTimeMillis()) / 1000L)));
                    return false;
                }

                Integer cd = getBlockProtectionTime(block);

                if ((cd == null || cd == 0) && Jobs.getGCManager().useGlobalTimer) {
                    addProtection(block, Jobs.getGCManager().globalblocktimer);
                    return true;
                }

                addProtection(block, cd);

            } else if (Jobs.getGCManager().useGlobalTimer) {
                addProtection(block, Jobs.getGCManager().globalblocktimer);
            }
        } else if (info.getType() == ActionType.PLACE) {
            ExploitProtection exploitProtection = getProtection(block);
            if (exploitProtection.getProtectedUntil() != 0) {

                long time = exploitProtection.getProtectedUntil();

                Integer cd = getBlockProtectionTime(block);
                if (time != -1L) {
                    if (time < System.currentTimeMillis()) {
                        addProtection(block, cd);
                        return true;
                    }

                    if ((time > System.currentTimeMillis() || exploitProtection.isPaid())) {
                        if (inform && player.canGetPaid(info))
                            CMIActionBar.send(player.getPlayer(), Jobs.getLanguage().getMessage("message.blocktimer", "[time]", Math.round((time - System.currentTimeMillis()) / 1000L)));
                        addProtection(block, cd);
                        return false;
                    }

                    // Lets add protection in any case
                    addProtection(block, cd);
                } else if (exploitProtection.isPaid() && exploitProtection.getProtectedUntil() == -1L && cd != null && cd == -1) {
                    addProtection(block, cd);
                    return false;
                } else
                    addProtection(block, cd);
            } else
                addProtection(block, getBlockProtectionTime(block));
        }

        return true;
    }
}
